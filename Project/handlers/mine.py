from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database import get_player, save_player
import json
import random
import time

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫
HIDDEN = "‚¨õ"  # –°–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞
EMPTY = "‚¨ú"
ORE = "‚õè"
DIAMOND = "üíé"
LOOT_BOX = "üéÅ"
CAVE_IN = "üí•"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–º–±–æ
COMBO_TIMES = {
    1: 30,  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è 1 —É—Ä–æ–≤–Ω—è
    2: 35,  # 35 —Å–µ–∫—É–Ω–¥ –¥–ª—è 2 —É—Ä–æ–≤–Ω—è
    3: 40,  # 40 —Å–µ–∫—É–Ω–¥ –¥–ª—è 3 —É—Ä–æ–≤–Ω—è
    4: 45,  # 45 —Å–µ–∫—É–Ω–¥ –¥–ª—è 4 —É—Ä–æ–≤–Ω—è
    5: 50,  # 50 —Å–µ–∫—É–Ω–¥ –¥–ª—è 5 —É—Ä–æ–≤–Ω—è
}

COMBO_MULTIPLIERS = {
    1: 1.5,  # x1.5 –¥–ª—è 1 —É—Ä–æ–≤–Ω—è
    2: 2.0,  # x2.0 –¥–ª—è 2 —É—Ä–æ–≤–Ω—è
    3: 2.5,  # x2.5 –¥–ª—è 3 —É—Ä–æ–≤–Ω—è
    4: 3.0,  # x3.0 –¥–ª—è 4 —É—Ä–æ–≤–Ω—è
    5: 4.0,  # x4.0 –¥–ª—è 5 —É—Ä–æ–≤–Ω—è
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è 5x5
def create_empty_field():
    return [[HIDDEN for _ in range(5)] for _ in range(5)]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—è —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
def generate_field(level):
    field = create_empty_field()
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
    base_probabilities = {
        EMPTY: 0.4,    # 40% –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
        ORE: 0.3,      # 30% —Ä—É–¥—ã
        DIAMOND: 0.1,  # 10% –∞–ª–º–∞–∑–æ–≤
        LOOT_BOX: 0.1, # 10% –ª—É—Ç-–±–æ–∫—Å–æ–≤
        CAVE_IN: 0.1   # 10% –æ–±–≤–∞–ª–æ–≤
    }
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º
    level_bonus = min(level * 0.02, 0.2)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 20%
    probabilities = {
        EMPTY: base_probabilities[EMPTY] - level_bonus,
        ORE: base_probabilities[ORE],
        DIAMOND: base_probabilities[DIAMOND] + level_bonus * 0.5,
        LOOT_BOX: base_probabilities[LOOT_BOX] + level_bonus * 0.3,
        CAVE_IN: base_probabilities[CAVE_IN] + level_bonus * 0.2
    }
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–æ–ª—è: –æ–¥–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥—Ä—É–≥–æ–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    display_field = create_empty_field()
    real_field = [[EMPTY for _ in range(5)] for _ in range(5)]
    
    for i in range(5):
        for j in range(5):
            r = random.random()
            cumulative = 0
            for cell_type, prob in probabilities.items():
                cumulative += prob
                if r <= cumulative:
                    real_field[i][j] = cell_type
                    break
    
    return display_field, real_field

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –ø–æ–ª—è
def create_keyboard(display_field, real_field):
    keyboard = []
    for i in range(5):
        keyboard_row = []
        for j in range(5):
            # –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —Ö—Ä–∞–Ω–∏–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏ —Ä–µ–∞–ª—å–Ω–æ–µ
            display_value = display_field[i][j]
            real_value = real_field[i][j]
            keyboard_row.append(InlineKeyboardButton(
                text=display_value,
                callback_data=f"mine_{i}_{j}_{real_value}"
            ))
        keyboard.append(keyboard_row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –∫–ª–µ—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã
def is_field_completed(display_field):
    return all(cell != HIDDEN for row in display_field for cell in row)

@router.message(F.text == "‚õè Mine")
async def mine_handler(message: Message):
    user_id = str(message.from_user.id)
    player = await get_player(user_id)

    if not player:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
    display_field, real_field = generate_field(player[4])  # player[4] - —ç—Ç–æ mine_level
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await save_player(
        user_id=user_id,
        username=player[1],
        resources=player[2],
        level=player[3],
        mine_level=player[4],
        inventory=json.dumps(json.loads(player[5]) if player[5] else []),
        minefield=json.dumps({
            "display": display_field,
            "real": real_field,
            "start_time": time.time()
        }),
        daily_quest=player[7],
        last_quest_date=player[8],
        title=player[9],
        frame=player[10],
        donate_currency=player[11]
    )

    await message.answer(
        f"‚õè –®–∞—Ö—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! –£—Ä–æ–≤–µ–Ω—å: {player[4]}\n–í—ã–±–µ—Ä–∏ –∫–ª–µ—Ç–∫—É –¥–ª—è –∫–æ–ø–∞–Ω–∏—è:",
        reply_markup=create_keyboard(display_field, real_field)
    )

@router.callback_query(F.data.startswith("mine_"))
async def process_mine_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    player = await get_player(user_id)
    
    if not player:
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start.")
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    _, row, col, cell_type = callback.data.split("_")
    row, col = int(row), int(col)
    
    resources = player[2]
    mine_level = player[4]
    fields = json.loads(player[6])
    display_field = fields["display"]
    real_field = fields["real"]
    start_time = fields.get("start_time", time.time())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞
    if display_field[row][col] != HIDDEN:
        await callback.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫
    if cell_type == ORE:
        resources += 1
        text = "‚õè –¢—ã –Ω–∞—à—ë–ª 1 —Ä—É–¥—É!"
    elif cell_type == DIAMOND:
        resources += 5
        text = "üíé –¢—ã –Ω–∞—à—ë–ª –∞–ª–º–∞–∑! +5 —Ä—É–¥—ã!"
    elif cell_type == LOOT_BOX:
        resources += 3
        text = "üéÅ –¢—ã –æ—Ç–∫—Ä—ã–ª –ª—É—Ç-–±–æ–∫—Å! +3 —Ä—É–¥—ã!"
    elif cell_type == CAVE_IN:
        resources = max(0, resources - 2)
        text = "üí• –û–±–≤–∞–ª! –¢—ã –ø–æ—Ç–µ—Ä—è–ª 2 —Ä—É–¥—ã!"
    else:
        text = "‚¨ú –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞."

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ø–æ–ª–µ
    display_field[row][col] = cell_type
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–ª–µ—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã
    if is_field_completed(display_field):
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        time_spent = time.time() - start_time
        mine_level += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–±–æ-–º–Ω–æ–∂–∏—Ç–µ–ª—å
        combo_level = 0
        for level, time_limit in COMBO_TIMES.items():
            if time_spent <= time_limit:
                combo_level = level
            else:
                break
        
        # –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Å —É—á–µ—Ç–æ–º –∫–æ–º–±–æ
        base_bonus = mine_level * 2
        combo_multiplier = COMBO_MULTIPLIERS.get(combo_level, 1.0)
        total_bonus = int(base_bonus * combo_multiplier)
        resources += total_bonus
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–±–æ
        text += f"\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —É—Ä–æ–≤–µ–Ω—å {mine_level-1}!\n"
        if combo_level > 0:
            text += f"‚ö°Ô∏è –ö–æ–º–±–æ x{combo_level}! –í—Ä–µ–º—è: {int(time_spent)}—Å\n"
            text += f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: +{total_bonus} —Ä—É–¥—ã (–±–∞–∑–æ–≤—ã–π {base_bonus} x{combo_multiplier})\n"
        else:
            text += f"‚è± –í—Ä–µ–º—è: {int(time_spent)}—Å\n"
            text += f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: +{total_bonus} —Ä—É–¥—ã\n"
        text += f"üìà –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —à–∞—Ö—Ç—ã: {mine_level}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        display_field, real_field = generate_field(mine_level)
        start_time = time.time()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await save_player(
        user_id=user_id,
        username=player[1],
        resources=resources,
        level=player[3],
        mine_level=mine_level,
        inventory=json.dumps(json.loads(player[5]) if player[5] else []),
        minefield=json.dumps({
            "display": display_field,
            "real": real_field,
            "start_time": start_time
        }),
        daily_quest=player[7],
        last_quest_date=player[8],
        title=player[9],
        frame=player[10],
        donate_currency=player[11]
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º
    await callback.message.edit_text(
        f"{text}\n\n–¢–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã: {resources}\n–£—Ä–æ–≤–µ–Ω—å —à–∞—Ö—Ç—ã: {mine_level}\n–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–ª–µ—Ç–∫—É:",
        reply_markup=create_keyboard(display_field, real_field)
    )
    await callback.answer()
